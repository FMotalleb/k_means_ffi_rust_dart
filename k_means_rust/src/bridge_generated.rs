#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

use crate::data::KMeansResultRow;
use crate::data::PointPub;

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_kmeans(port_: i64, points: *mut wire_list_point_pub, output_count: usize) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "kmeans",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_points = points.wire2api();
            let api_output_count = output_count.wire2api();
            move |task_callback| Ok(kmeans(api_points, api_output_count))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_optics(
    port_: i64,
    points: *mut wire_list_point_pub,
    eps: f64,
    min_pts: usize,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "optics",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_points = points.wire2api();
            let api_eps = eps.wire2api();
            let api_min_pts = min_pts.wire2api();
            move |task_callback| Ok(optics(api_points, api_eps, api_min_pts))
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_point_pub {
    ptr: *mut wire_PointPub,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_PointPub {
    x: f64,
    y: f64,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_list_point_pub_0(len: i32) -> *mut wire_list_point_pub {
    let wrap = wire_list_point_pub {
        ptr: support::new_leak_vec_ptr(<wire_PointPub>::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<Vec<PointPub>> for *mut wire_list_point_pub {
    fn wire2api(self) -> Vec<PointPub> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}

impl Wire2Api<PointPub> for wire_PointPub {
    fn wire2api(self) -> PointPub {
        PointPub {
            x: self.x.wire2api(),
            y: self.y.wire2api(),
        }
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

impl NewWithNullPtr for wire_PointPub {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}

// Section: impl IntoDart

impl support::IntoDart for KMeansResultRow {
    fn into_dart(self) -> support::DartCObject {
        vec![self.point.into_dart(), self.source_indexes.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for KMeansResultRow {}

impl support::IntoDart for PointPub {
    fn into_dart(self) -> support::DartCObject {
        vec![self.x.into_dart(), self.y.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PointPub {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
