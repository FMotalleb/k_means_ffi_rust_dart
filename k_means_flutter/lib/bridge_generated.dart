// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class KMeansRust {
  Future<List<KMeansResultRow>> kmeans(
      {required List<PointPub> points, required int outputCount, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kKmeansConstMeta;

  Future<List<KMeansResultRow>> optics(
      {required List<PointPub> points,
      required double eps,
      required int minPts,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpticsConstMeta;
}

class KMeansResultRow {
  final PointPub point;
  final Int32List sourceIndexes;

  KMeansResultRow({
    required this.point,
    required this.sourceIndexes,
  });
}

class PointPub {
  final double x;
  final double y;

  PointPub({
    required this.x,
    required this.y,
  });
}

class KMeansRustImpl extends FlutterRustBridgeBase<KMeansRustWire>
    implements KMeansRust {
  factory KMeansRustImpl(ffi.DynamicLibrary dylib) =>
      KMeansRustImpl.raw(KMeansRustWire(dylib));

  KMeansRustImpl.raw(KMeansRustWire inner) : super(inner);

  Future<List<KMeansResultRow>> kmeans(
          {required List<PointPub> points,
          required int outputCount,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_kmeans(port_,
            _api2wire_list_point_pub(points), _api2wire_usize(outputCount)),
        parseSuccessData: _wire2api_list_k_means_result_row,
        constMeta: kKmeansConstMeta,
        argValues: [points, outputCount],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kKmeansConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "kmeans",
        argNames: ["points", "outputCount"],
      );

  Future<List<KMeansResultRow>> optics(
          {required List<PointPub> points,
          required double eps,
          required int minPts,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_optics(
            port_,
            _api2wire_list_point_pub(points),
            _api2wire_f64(eps),
            _api2wire_usize(minPts)),
        parseSuccessData: _wire2api_list_k_means_result_row,
        constMeta: kOpticsConstMeta,
        argValues: [points, eps, minPts],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kOpticsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "optics",
        argNames: ["points", "eps", "minPts"],
      );

  // Section: api2wire
  double _api2wire_f64(double raw) {
    return raw;
  }

  ffi.Pointer<wire_list_point_pub> _api2wire_list_point_pub(
      List<PointPub> raw) {
    final ans = inner.new_list_point_pub_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_point_pub(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  int _api2wire_usize(int raw) {
    return raw;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_point_pub(PointPub apiObj, wire_PointPub wireObj) {
    wireObj.x = _api2wire_f64(apiObj.x);
    wireObj.y = _api2wire_f64(apiObj.y);
  }
}

// Section: wire2api
double _wire2api_f64(dynamic raw) {
  return raw as double;
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

Int32List _wire2api_int_32_list(dynamic raw) {
  return raw as Int32List;
}

KMeansResultRow _wire2api_k_means_result_row(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return KMeansResultRow(
    point: _wire2api_point_pub(arr[0]),
    sourceIndexes: _wire2api_int_32_list(arr[1]),
  );
}

List<KMeansResultRow> _wire2api_list_k_means_result_row(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_k_means_result_row).toList();
}

PointPub _wire2api_point_pub(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return PointPub(
    x: _wire2api_f64(arr[0]),
    y: _wire2api_f64(arr[1]),
  );
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class KMeansRustWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  KMeansRustWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  KMeansRustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_kmeans(
    int port_,
    ffi.Pointer<wire_list_point_pub> points,
    int output_count,
  ) {
    return _wire_kmeans(
      port_,
      points,
      output_count,
    );
  }

  late final _wire_kmeansPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_point_pub>,
              uintptr_t)>>('wire_kmeans');
  late final _wire_kmeans = _wire_kmeansPtr
      .asFunction<void Function(int, ffi.Pointer<wire_list_point_pub>, int)>();

  void wire_optics(
    int port_,
    ffi.Pointer<wire_list_point_pub> points,
    double eps,
    int min_pts,
  ) {
    return _wire_optics(
      port_,
      points,
      eps,
      min_pts,
    );
  }

  late final _wire_opticsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_point_pub>,
              ffi.Double, uintptr_t)>>('wire_optics');
  late final _wire_optics = _wire_opticsPtr.asFunction<
      void Function(int, ffi.Pointer<wire_list_point_pub>, double, int)>();

  ffi.Pointer<wire_list_point_pub> new_list_point_pub_0(
    int len,
  ) {
    return _new_list_point_pub_0(
      len,
    );
  }

  late final _new_list_point_pub_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_point_pub> Function(
              ffi.Int32)>>('new_list_point_pub_0');
  late final _new_list_point_pub_0 = _new_list_point_pub_0Ptr
      .asFunction<ffi.Pointer<wire_list_point_pub> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_PointPub extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class wire_list_point_pub extends ffi.Struct {
  external ffi.Pointer<wire_PointPub> ptr;

  @ffi.Int32()
  external int len;
}

typedef uintptr_t = ffi.UnsignedLong;
typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
